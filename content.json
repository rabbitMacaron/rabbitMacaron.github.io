{"pages":[{"title":"all-categories","text":"","link":"/all-categories/index.html"},{"title":"all-tags","text":"","link":"/all-tags/index.html"}],"posts":[{"title":"Hexo blog test","text":"테스트 Hexo blog ! 갈 길이 멀지만 한걸음부터ㅎㅎ 1$hexo new post '포스트명' 바로 포스팅되지만 _config.yml 에서 'post’가 아닌 'draft’로 변경해주면 초안으로 작성할 수 있다. (초안으로 작성된 글은 로컬 서버에서만 확인 가능)","link":"/2021/07/25/%ED%85%8C%EC%8A%A4%ED%8A%B8/"},{"title":"이클립스에서 git-receive-pack not permitted on 에러 발생 시 해결방법","text":"💣Git에 push하다 갑자기 발생한 에러💣 저번주까지 문제 없다가 갑자기 에러가 발생해서 너무 당황스러웠다. 에러메세지를 보고 이클립스에 저장해뒀던 Git ID/PW 정보를 다시 입력해보았지만 여전히 에러가 발생했다 … ✔️에러 원인 Git Hub에서, Git 작업 인증 시 암호를 사용하는 인증은 더 이상 사용할 수 없고 곧 작동하지않을거라는 메일을 보냈었는데 확인을 못 했다…😥 🔧해결방법 이 문제의 해결방법은 이클립스에 저장해뒀던 Git 계정 정보를 수정하는 것이 맞다. 다만, 비밀번호가 아닌 개인토큰을 입력해야하므로 Personal Access Token을 생성해야한다. 1. Settings 접근 Git에 로그인 한 후, 프로필 클릭 &gt; Settings 에 접근한다. 2. Developer settings 접근 좌측에 있는 Developer settings 에 접근한다. 3. 토큰 생성 (해당 사진 이후의 사진들은, 이미 토큰 생성 후 캡쳐했기 때문에 화면에 차이가 있다!!!) 좌측의 Personal access tokens &gt; Generate new token 버튼을 클릭한다. 버튼을 클릭하면, 본인 확인을 위해 비밀번호를 입력하는 창이 뜬다. 4. 토큰 정보 설정 Note : 토큰의 이름을 작성한다. (본인이 구분할만한 설명 혹은 용도를 작성하면 될 거 같다) Select scopes : 항목들 중 허가할 권한을 선택한다 하단의 Generate token 버튼을 클릭한다. 5. 생성된 토큰 확인 Personal Access Token이 생성되었다!!! (해당 화면과 다르게, token의 값이 화면에 보일 것이다.) ❗️생성된 토큰값은 다시 확인할 수 없으니 값을 복사하여 안전한 곳에 보관하자❗️ 6. 이클립스에 저장된 Git계정 정보 수정 이클립스로 돌아와서, 상단의 window &gt; preferences 에 접근한 후, General &gt; Security &gt; Contents 를 클릭한다. GIT을 펼쳐서 저장해뒀던 GIT ID/PW를 삭제(delete)한다. 7. 패스워드 대신 personal token 입력 다시 Git에 Push 혹은 Pull을 시도할 경우, Git ID/PW를 입력하는 창이 호출된다. 이 때 Git ID와 personal token을 입력한다. 해결 완료😊","link":"/2021/08/17/git-receive-pack/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new &quot;My New Post&quot; More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","link":"/2021/07/25/hello-world/"},{"title":"자바 진행단계 평가_기본 문제풀기","text":"Java &amp;SpringBoot로 시작하는 웹 프로그래밍 인강을 들으며 4주차에 있는 진행단계평가를 풀어보았다. 쉽지만 기본인 문제이니 한 번 풀어보자. 총 문제의 수는 10개이고 ⭕️true ❌false 로 답하면 된다. 📎 문제 1 ❝ 인스턴스란 클래스로부터 구현된 객체이며 스택 메모리에 생성된다 ❠ 🔓 정답 및 해설 정답은 ❌이다. 인스턴스란 클래스로부터 구현된 객체이며 힙 메모리에 생성된다. 📎 문제 2 ❝ 컴퓨터에서 자료를 표현하는 최소 단위는 바이트(Byte)다 ❠ 🔓 정답 및 해설 정답은 ❌이다. 자료를 표현하는 최소 단위는 비트(Bit)이다. 바이트(Byte)는 8비트(Bit)이다. 📎 문제 3 ❝ 상위 클래스의 메서드를 이름과 매개변수 등을 동일하게 유지하여 재정의 하는 것을 오버로딩이라고 한다 ❠ 🔓 정답 및 해설 정답은 ❌이다. 오버로딩은 메서드명은 같지만 매개변수가 다른 것을 의미한다. 이름과 매개변수 등을 동일하게 유지하여 재정의하는 것은 오버라이딩이다. 📎 문제 4 ❝ 추상 메소드가 포함된 추상 클래스를 상속받은 모든 자식 클래스는 추상 메소드를 반드시 구현할 필요는 없다 ❠ 🔓 정답 및 해설 정답은 ❌이다. 추상 메소드가 포함된 추상 클래스를 상속받은 모든 자식 클래스는 추상 메소드를 반드시 구현해야 한다. 그렇지않으면 에러가 발생하는데, 추상 메서드를 생성하거나 abstract class를 생성해야한다. 📎 문제 5 ❝ 템플릿 메서드는 추상 메서드나 구현된 메서드를 활용하여 전체 흐름을 정의해 놓은 메서드를 말하는데요, 이 때 재정의 혹은 오버라이딩을 방지하기 위해서는 final 로 선언하여 재정의 할 수 없게 합니다 ❠ 🔓 정답 및 해설 정답은 ⭕️이다. 정해진 순서대로 진행되어야하기 때문에 final을 써서 재정의를 방지한다. final은 시스템관련, 메모리관련, 시나리오를 정의한 메서드 등에 주로 사용한다. 📎 문제 6 ❝ 하위 클래스가 생성되는 과정 중 하위 클래스의 생성자에서는 무조건 상위 클래스의 생성자가 호출되어야 한다 ❠ 🔓 정답 및 해설 정답은 ⭕️이다. 이 때 하위클래스에서는 super를 사용한다. 📎 문제 7 ❝ break를 사용하여 반복문의 제어를 빠져 나올 수 있다 ❠ 🔓 정답 및 해설 정답은 ⭕️이다. 📎 문제 8 ❝ Java는 프로그래밍 언어의 일종이다 ❠ 🔓 정답 및 해설 정답은 ⭕️이다. 프로그래밍 언어에는 Java, C, Python 등이 있다. 📎 문제 9 ❝ B클래스가 A클래스를 상속했을 경우, B타입 변수에 A 인스턴스를 할당할 수 있다 ❠ 🔓 정답 및 해설 정답은 ❌이다. A타입 변수에 B 인스턴스를 할당할 수 있다. 📎 문제 10 ❝ 추상클래스는 new로 생성이 불가능하다 ❠ 🔓 정답 및 해설 정답은 ⭕️이다. 추상클래스 내 추상메서드는 구현되지않은 경우도 존재하기에 인스턴스화 할 수 없다. 더 빨리 풀었지만 혹시나하는 마음에 강의 들으며 기록해뒀던 것들을 참고하느라 오래 걸렸다… 기본적인 내용이지만 다 맞아서 내심 뿌듯했는데… 어제 또 다시 생각이 많아졌다😥 힘내자!","link":"/2021/10/04/Java-beginner-test/"},{"title":"02&#x2F;08 공부기록!","text":"📚02/08 ✔ 매일 봤던 것들 정리하기 내가 공부하던 것, 질문받거나 질문했던 것까지 다 정리할거라 내용에 일관성은 없겠지만!! 정리하면서 한 번 더 보는 시간을 가져야지😃 💬DBCP가 뭐예요? 자바에서 DB 커넥션을 할 때 사용하는 방법 중 하나로, 다른 방법들로는 JDBC, JNDI가 있다. ❔ Connection과 Connection pool DriveManager.getConnection()은 실제 프로그램과 데이터베이스를 네트워크상에서 연결해주는 메소드이다. Connection은 네트워크상의 연결 자체를 의미한다. Connection pool은 데이터베이스와 연결된 Connection객체를 사용하고 작업이 끝나면 다시 반환하는 것을 말한다. Connection pool을 사용하면 풀 속에 미리 Connection이 생성되어 있기 때문에 Connection을 생성하는 데 드는 연결시간이 소비되지않는다. 또, Connection 재사용이 가능하기 때문에 사용자가 접속할 때마다 계속해서 Connection을 생성할 필요가 없다. 즉, Connection pool을 사용 시 프로그램 효율과 성능이 전체적으로 증가한다. ❔ JDBC (Java DataBase Connectivity)란? 자바와 데이터베이스의 DBMS를 연결시켜주는 응용프로그램 인터페이스이다. 데이터베이스의 DBMS 종류에 상관없이 독립적으로 사용이 가능하다는 장점이 있으며 DB커넥션 방법 중 기본이라고 할 수 있다. 데이터베이스풀 방식을 사용하지않고 DB에서 정보를 가져올 때마다 매번 디비 연결을 열고 닫는 방식을 사용한다. 이 방식은 각 페이지에 database통신이 필요한 부분이 있을 때마다 디비 객체 생성, 커넥션 연결, 종료 등을 반복하기 때문에 효율성이 떨어진다는 단점이 있어 기본이 되긴해도 잘 사용되지않는다. ❔ DBCP (DataBase Connection Pool)란? DB와 커넥션을 맺고 있는 객체를 관리하는 역할을 한다. 어플리케이션을 시작할 때 원하는만큼 커넥션객체를 만들어서 pool에 넣어놓았다가 필요할 때 갖다쓰고 pool에 반납하는 방식을 사용한다. 다중스레드를 스레드풀로 관리하는 것과 비슷한 방식이다. 상용 어플리케이션에는 보통 pool방식을 사용한다. ❔ JNDI (Java Naming and Directory Interface)란? 데이터베이스 커넥션 풀을 이용하는 방식으로, DBCP는 DB커넥션 풀을 어플리케이션 소스단에 설정해놓은 방식이지만 JNDI는 WAS단에 DB커넥션풀을 미리 네이밍 해두는 방식을 사용한다. 이와 같은 방식은, DB설정 정보 파악이 쉽고 DB 커넥션풀을 효율적으로 사용할 수 있다. Reference. https://zunoxi.tistory.com/58 https://eongeuni.tistory.com/43 모델2로 구현하는 자바 웹 프로그래밍 JSP 2.2&servlet 3.0 💬Servlet과 Controller는 같은 건가요? 결론부터 말하자면 당연히.. 다르다. 어떻게 해석하냐에 따라 동일하게 보일 수 있지만 원초적인 목적이 다르다. 컨트롤러는 다른 요청을 받고 처리결과를 어떤 화면에 전달해줄지 전달자 역할만 하고, 서블릿은 요청을 받는 건 동일하나 처리결과를 직접 화면으로 만들어서 전달한다. 그래서 컨트롤러는 전달해줄 html파일이 실제 필요하고 서블릿은 html파일이 필요없이 바로 화면을 리턴할 수 있다. 근데 서블릿은 코드가 너무 복잡하고 디버깅이 어려워서 잘 쓰이지않는다. 대신 서블릿의 단점을 보완하고자 만든 서블릿 기반의 서버 스크립트 기술인 JSP를 사용한다. 이 jsp는 컨트롤러와 같이 쓰인다. Reference. 👍🏻직장동료 💬Javascript에서 변수 var 선언하지않아도 되는 이유? var 문으로 선언되지 않는 변수에 대입하면 오류가 발생하지 않는다. 이유는 자바스크립트가 해당 변수를 자동으로 전역 변수로 선언 하기 때문인데(변수의 의도하지 않은 전역화), 이는 함수의 유효 범위와 관련이 있다. 그렇다면 전역변수 사용은… 괜찮을까? 전역변수를 반드시 사용해야할 이유가 없다면 지역변수를 사용해야한다. ❔전역 변수? 모든 영역에서 사용할 수 있는 변수이다. 함수 호출과 같이 전역 코드를 실행하는 특별한 진입점이 없고 코드가 로드되자마자 곧바로 해석되고 실행된다. 브라우저 환경에서 전역 객체는 window이며 이 환경에서 var로 선언한 전역변수는 전역 객체 window의 프로퍼티다. 전역객체 window는 웹 페이지를 닫기전까지 유효하다. 즉, 전역객체의 생명주기와 일치한다. 이러한 전역변수의 문제점은 📌전역변수는 모든 코드가 전역변수를 참조하고 변경할 수 있는 암묵적 결합을 허용한다. 즉 유효 범위가 크면 코드의 가독성이 나빠지고 의도치 않게 상태가 변경되어 위험성이 높아진다. 📌긴 생명주기 때문에 메모리 리소스도 오랜 기간 소비하고 상태 변경에 의한 오류가 발생할 확률이 높다. 📌스코프 체인 상에서 종점에 존재 하기 때문에 가장 마지막에 검색된다. 즉, 검색 속도가 가장 느리다. 📌자바스크립트의 문제 중 하나는 파일이 분리되어있다 해도 전역 스코프를 공유한다. 따라서 다른 파일 내에서 동일한 이름으로 전역 변수나 전역 함수를 재할당할 경우 예상치 못한 결과를 초래할 수 있다는 것이다. Reference. https://creatijin.tistory.com/241 행복해지는 HTML+CSS+JAVASCRIPT ✏ Javascript 기초 자바스크립트를 사용하는 이유는 서버가 아닌 클라이언트에서 간단한 작업이 이루어지도록 하기 위한 것이다. html에서 script태그는 자바스크립트 전용 태그가 아니므로 language속성에 \"javascript\"를 작성해야한다. 작성법은 3가지(head/body/외부파일(.js)로 source 속성이용)가 있다. 작성방법: 1. head에 작성 head에 작성 시 다른 문장들에 비해 먼저 해석되어 처리된다. 페이지 읽는 도중 중단될 경우 에러가 발생한다. 그래서 특별한 경우가 아니면 페이지 읽혀지기 전 수행되는 head영역에 자바스크립트를 기술한다. 2. body에 작성 일반적이진 않지만 body부분의 문장이 수행되는 도중에 자바스크립트 문장들이 반드시 기술되어야할 때 body영역에 자바스크립트를 기술한다. 3. 외부파일로 작성 자바스크립트로 구성된 내용을 완전히 다른 파일(.js)로 작성한다. 파일 작성 시 script태그는 html 문서 내에서 스크립트 구문이 시작되는 위치를 알려주는 html태그이므로 자바스크립트 파일에서는 제외한다. html문서에 삽입하는 방법은 script 속성에서 src=\".js\"를 작성해주면 된다. 반복되는 내용일 경우 파일만 삽입하면 재사용이 가능하다는 장점이 있다. 자바스크립트 주석은 \\을 제외하고 사용하면 된다. 자바스크립트를 사용하지않을 경우 코드가 그대로 노출될 수 있으므로 항상 주석을 같이 작성해주는 게 좋다. 자료형이란 사람과 컴퓨터(2진법으로만 구성) 사이의 차이를 극복하기 위해 사람과 컴퓨터 사이의 절충 선에서 사람들의 정보들을 간추려 정리한 것이다. 즉, 컴퓨터가 정보를 기억하고 처리하는 규칙을 지정하여 자료형으로 정의한 것. 자료형에는 정수형, 실수형, 논리형, 문자형이 있다. 종류 의미 정수형 10진수, 8진수, 16진수 실수형 소수점을 가진 숫자(소수형/정수형 실수) 논리형 True, false 문자형 ‘’ , “” 그 외로 null형이 있는데 내용이 전혀 없을 때를 말한다. 주로 문자형에서 사용됨 특수문자 이스케이프 시퀀스 의미 \\b 커서를 앞으로 한 칸 이동. Basck space \\f 커서를 다음 페이지로 이동. Form Feed \\n 커서를 다음 줄로 이동. Newline \\t 커서를 한 탭만큼 이동. Tab \\r 커서를 그 줄의 처음으로 이동. Return ’ '표시 &quot; &quot;표시 변수 네이밍규칙. 변수 시작은 영문자 or underBar(_). 숫자는 사용할 수 없다. 두번째 문자부터는 영문자, 숫자, underBar 모두 사용 가능하며 대소문자를 구분한다. 변수명을 구성하는 문자들 사이의 공백은 올 수 없고 두 단어 연결 시 underBar를 사용하여 표현한다. 미리 정해진 예약어(keyword)는 변수로 사용할 수 없다. 변수를 사용만 하면 자동적으로 생성되므로 굳이 신경써서 선언하지않아도 된다. 자료형은 값을 대입하는 순간에 자동으로 결정된다. 명시적으로 사용할 경우, 자료형을 구분하지 않기 때문에 var로 선언한다. 연산자 산술연산자 : +, -, *, /, % 관계연산자 : >, >=,","link":"/2022/02/09/study-0208/"}],"tags":[],"categories":[]}