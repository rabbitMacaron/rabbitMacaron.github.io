{"pages":[{"title":"all-categories","text":"","link":"/all-categories/index.html"},{"title":"all-tags","text":"","link":"/all-tags/index.html"}],"posts":[{"title":"Hexo blog test","text":"테스트 Hexo blog ! 갈 길이 멀지만 한걸음부터ㅎㅎ 1$hexo new post '포스트명' 바로 포스팅되지만 _config.yml 에서 'post’가 아닌 'draft’로 변경해주면 초안으로 작성할 수 있다. (초안으로 작성된 글은 로컬 서버에서만 확인 가능)","link":"/2021/07/25/%ED%85%8C%EC%8A%A4%ED%8A%B8/"},{"title":"이클립스에서 git-receive-pack not permitted on 에러 발생 시 해결방법","text":"💣Git에 push하다 갑자기 발생한 에러💣 저번주까지 문제 없다가 갑자기 에러가 발생해서 너무 당황스러웠다. 에러메세지를 보고 이클립스에 저장해뒀던 Git ID/PW 정보를 다시 입력해보았지만 여전히 에러가 발생했다 … ✔️에러 원인 Git Hub에서, Git 작업 인증 시 암호를 사용하는 인증은 더 이상 사용할 수 없고 곧 작동하지않을거라는 메일을 보냈었는데 확인을 못 했다…😥 🔧해결방법 이 문제의 해결방법은 이클립스에 저장해뒀던 Git 계정 정보를 수정하는 것이 맞다. 다만, 비밀번호가 아닌 개인토큰을 입력해야하므로 Personal Access Token을 생성해야한다. 1. Settings 접근 Git에 로그인 한 후, 프로필 클릭 &gt; Settings 에 접근한다. 2. Developer settings 접근 좌측에 있는 Developer settings 에 접근한다. 3. 토큰 생성 (해당 사진 이후의 사진들은, 이미 토큰 생성 후 캡쳐했기 때문에 화면에 차이가 있다!!!) 좌측의 Personal access tokens &gt; Generate new token 버튼을 클릭한다. 버튼을 클릭하면, 본인 확인을 위해 비밀번호를 입력하는 창이 뜬다. 4. 토큰 정보 설정 Note : 토큰의 이름을 작성한다. (본인이 구분할만한 설명 혹은 용도를 작성하면 될 거 같다) Select scopes : 항목들 중 허가할 권한을 선택한다 하단의 Generate token 버튼을 클릭한다. 5. 생성된 토큰 확인 Personal Access Token이 생성되었다!!! (해당 화면과 다르게, token의 값이 화면에 보일 것이다.) ❗️생성된 토큰값은 다시 확인할 수 없으니 값을 복사하여 안전한 곳에 보관하자❗️ 6. 이클립스에 저장된 Git계정 정보 수정 이클립스로 돌아와서, 상단의 window &gt; preferences 에 접근한 후, General &gt; Security &gt; Contents 를 클릭한다. GIT을 펼쳐서 저장해뒀던 GIT ID/PW를 삭제(delete)한다. 7. 패스워드 대신 personal token 입력 다시 Git에 Push 혹은 Pull을 시도할 경우, Git ID/PW를 입력하는 창이 호출된다. 이 때 Git ID와 personal token을 입력한다. 해결 완료😊","link":"/2021/08/17/git-receive-pack/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new &quot;My New Post&quot; More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","link":"/2021/07/25/hello-world/"},{"title":"자바 진행단계 평가_기본 문제풀기","text":"Java &amp;SpringBoot로 시작하는 웹 프로그래밍 인강을 들으며 4주차에 있는 진행단계평가를 풀어보았다. 쉽지만 기본인 문제이니 한 번 풀어보자. 총 문제의 수는 10개이고 ⭕️true ❌false 로 답하면 된다. 📎 문제 1 ❝ 인스턴스란 클래스로부터 구현된 객체이며 스택 메모리에 생성된다 ❠ 🔓 정답 및 해설 정답은 ❌이다. 인스턴스란 클래스로부터 구현된 객체이며 힙 메모리에 생성된다. 📎 문제 2 1컴퓨터에서 자료를 표현하는 최소 단위는 바이트(Byte)다 🔓 정답 및 해설 정답은 ❌이다. 자료를 표현하는 최소 단위는 비트(Bit)이다. 바이트(Byte)는 8비트(Bit)이다. 📎 문제 3 ❝ 상위 클래스의 메서드를 이름과 매개변수 등을 동일하게 유지하여 재정의 하는 것을 오버로딩이라고 한다 ❠ 🔓 정답 및 해설 정답은 ❌이다. 오버로딩은 메서드명은 같지만 매개변수가 다른 것을 의미한다. 이름과 매개변수 등을 동일하게 유지하여 재정의하는 것은 오버라이딩이다. 📎 문제 4 ❝ 추상 메소드가 포함된 추상 클래스를 상속받은 모든 자식 클래스는 추상 메소드를 반드시 구현할 필요는 없다 ❠ 🔓 정답 및 해설 정답은 ❌이다. 추상 메소드가 포함된 추상 클래스를 상속받은 모든 자식 클래스는 추상 메소드를 반드시 구현해야 한다. 그렇지않으면 에러가 발생하는데, 추상 메서드를 생성하거나 abstract class를 생성해야한다. 📎 문제 5 ❝ 템플릿 메서드는 추상 메서드나 구현된 메서드를 활용하여 전체 흐름을 정의해 놓은 메서드를 말하는데요, 이 때 재정의 혹은 오버라이딩을 방지하기 위해서는 final 로 선언하여 재정의 할 수 없게 합니다 ❠ 🔓 정답 및 해설 정답은 ⭕️이다. 정해진 순서대로 진행되어야하기 때문에 final을 써서 재정의를 방지한다. final은 시스템관련, 메모리관련, 시나리오를 정의한 메서드 등에 주로 사용한다. 📎 문제 6 ❝ 하위 클래스가 생성되는 과정 중 하위 클래스의 생성자에서는 무조건 상위 클래스의 생성자가 호출되어야 한다 ❠ 🔓 정답 및 해설 정답은 ⭕️이다. 이 때 하위클래스에서는 super를 사용한다. 📎 문제 7 ❝ break를 사용하여 반복문의 제어를 빠져 나올 수 있다 ❠ 🔓 정답 및 해설 정답은 ⭕️이다. 📎 문제 8 ❝ Java는 프로그래밍 언어의 일종이다 ❠ 🔓 정답 및 해설 정답은 ⭕️이다. 프로그래밍 언어에는 Java, C, Python 등이 있다. 📎 문제 9 ❝ B클래스가 A클래스를 상속했을 경우, B타입 변수에 A 인스턴스를 할당할 수 있다 ❠ 🔓 정답 및 해설 정답은 ❌이다. A타입 변수에 B 인스턴스를 할당할 수 있다. 📎 문제 10 ❝ 추상클래스는 new로 생성이 불가능하다 ❠ 🔓 정답 및 해설 정답은 ⭕️이다. 추상클래스 내 추상메서드는 구현되지않은 경우도 존재하기에 인스턴스화 할 수 없다. 더 빨리 풀었지만 혹시나하는 마음에 강의 들으며 기록해뒀던 것들을 참고하느라 오래 걸렸다… 기본적인 내용이지만 다 맞아서 내심 뿌듯했는데… 어제 또 다시 생각이 많아졌다😥 힘내자!","link":"/2021/10/04/Java-beginner-test/"}],"tags":[],"categories":[]}